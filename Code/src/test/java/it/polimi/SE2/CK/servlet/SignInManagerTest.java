package it.polimi.SE2.CK.servlet;
// Generated by CodiumAI

import it.polimi.SE2.CK.TestUtils;
import it.polimi.SE2.CK.servlet.SignInManager;

import org.junit.Test;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Random;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class SignInManagerTest {

    TestUtils testUtils =new TestUtils();


    // Successful creation of a new user
    @Test
    public void test_successful_creation_of_new_user() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        Random random = new Random();

        // Generazione di un numero intero casuale
        Integer numeroInteroCasuale = random.nextInt();
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn(numeroInteroCasuale.toString());
        when(request.getParameter("email")).thenReturn(numeroInteroCasuale+ "@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is OK
        verify(response).setStatus(HttpServletResponse.SC_OK);
    }

    // Password and ConfirmPassword fields match
    @Test
    public void test_password_and_confirm_password_match() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("passworD");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);
    
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is OK
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"The two password must be the same, please retry\r\n");
    }

    // Empty role field
    @Test
    public void test_empty_role_field() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"All fields are required\r\n");
    }

    // Empty name field
    @Test
    public void test_empty_name_field() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
    
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"All fields are required\r\n");
    }

    @Test
    public void test_username_already_used() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob99");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"Username already used\r\n");
    }

    @Test
    public void test_mail_already_used() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"Email already used\r\n");
    }

    @Test
    public void test_wrong_role() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("Ciao");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"An error occurred with the data sent, please retry\r\n");
    }

    @Test
    public void test_wrong_date() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("ciso");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"You must insert a date in the field birthdate, please retry\r\n");
    }

    @Test
    public void test_too_long_date() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("19999-12-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals ("You must insert a valid date\r\n", writer.toString());
    }

    @Test
    public void test_wrong_mail() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1999-12-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("aaaaaa");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = testUtils.setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals ("You must insert a valid email, please retry\r\n", writer.toString());
    }


    // UserDAO.createUser() returns 0
    @Test
    public void test_signIn_doGet() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
        when(request.getRequestDispatcher("ErrorPage.html")).thenReturn(new RequestDispatcher() {
            @Override
            public void forward(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {

            }

            @Override
            public void include(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException {

            }
        });

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();

        // Call the doPost method with the mocked request and response objects
        signInManager.doGet(request, response);

        // Verify that the response status is SC_NOT_ACCEPTABLE
        verify(response).setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);
        // Verify that the error message is written to the response
        assertEquals (writer.toString(),"Request non acceptable\r\n");
    }
}