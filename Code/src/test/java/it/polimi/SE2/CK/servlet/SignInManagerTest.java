package it.polimi.SE2.CK.servlet;
// Generated by CodiumAI

import it.polimi.SE2.CK.servlet.SignInManager;

import org.junit.Test;

import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Random;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class SignInManagerTest {


    // Successful creation of a new user
    @Test
    public void test_successful_creation_of_new_user() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        byte[] array = new byte[7]; // length is bounded by 7
        new Random().nextBytes(array);
        String generatedString = new String(array, Charset.forName("UTF-8"));
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn(generatedString);
        when(request.getParameter("email")).thenReturn(generatedString+ "@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is OK
        verify(response).setStatus(HttpServletResponse.SC_OK);
    }

    // Password and ConfirmPassword fields match
    @Test
    public void test_password_and_confirm_password_match() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("passworD");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);
    
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is OK
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"The two password must be the same, please retry\r\n");
    }

    // Empty role field
    @Test
    public void test_empty_role_field() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("");
        when(request.getParameter("name")).thenReturn("John");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"All fields are required\r\n");
    }

    // Empty name field
    @Test
    public void test_empty_name_field() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));
    
        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("johndoe");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");
    
        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
    
        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);
    
        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"All fields are required\r\n");
    }

    @Test
    public void test_username_already_used() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob99");
        when(request.getParameter("email")).thenReturn("johndoe@example.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"Username already used\r\n");
    }

    @Test
    public void test_mail_already_used() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"Email already used\r\n");
    }

    @Test
    public void test_wrong_role() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("Ciao");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("1990-01-01");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"An error occurred with the data sent, please retry\r\n");
    }

    @Test
    public void test_wrong_date() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request
        when(request.getParameter("role")).thenReturn("1");
        when(request.getParameter("name")).thenReturn("Bob");
        when(request.getParameter("surname")).thenReturn("Doe");
        when(request.getParameter("birthdate")).thenReturn("ciso");
        when(request.getParameter("SignInUsername")).thenReturn("Bob");
        when(request.getParameter("email")).thenReturn("BobRoss@gmail.com");
        when(request.getParameter("SignInPassword")).thenReturn("password");
        when(request.getParameter("ConfirmPassword")).thenReturn("password");
        when(request.getParameter("userGH")).thenReturn("johndoe");

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();
        ServletConfig servletConfig = setUp();
        signInManager.init(servletConfig);

        // Call the doPost method with the mocked request and response objects
        signInManager.doPost(request, response);

        // Verify that the response status is BAD_REQUEST
        verify(response).setStatus(HttpServletResponse.SC_BAD_REQUEST);
        assertEquals (writer.toString(),"You must insert a date in the field birthdate, please retry\r\n");
    }


    // UserDAO.createUser() returns 0
    @Test
    public void test_signIn_doGet() throws ServletException, IOException {
        // Mock the HttpServletRequest and HttpServletResponse objects
        HttpServletRequest request = mock(HttpServletRequest.class);
        HttpServletResponse response = mock(HttpServletResponse.class);

        StringWriter writer = new StringWriter();
        when(response.getWriter()).thenReturn(new PrintWriter(writer));

        // Set the necessary parameters for the request

        // Create a new instance of SignInManager
        SignInManager signInManager = new SignInManager();

        // Call the doPost method with the mocked request and response objects
        signInManager.doGet(request, response);

        // Verify that the response status is SC_NOT_ACCEPTABLE
        verify(response).setStatus(HttpServletResponse.SC_NOT_ACCEPTABLE);
        // Verify that the error message is written to the response
        assertEquals (writer.toString(),"Request non acceptable\r\n");
    }

    private ServletConfig setUp() {
        ServletContext servletContext = mock(ServletContext.class);

        // Mock servlet config
        ServletConfig servletConfig = mock(ServletConfig.class);
        when(servletConfig.getServletContext()).thenReturn(servletContext);
        when(servletContext.getInitParameter("dbUrl")).thenReturn("jdbc:mysql://localhost:3306/new_schema?serverTimezone=UTC");
        when(servletContext.getInitParameter("dbUser")).thenReturn("root");
        when(servletContext.getInitParameter("dbPassword")).thenReturn("");
        when(servletContext.getInitParameter("dbDriver")).thenReturn("com.mysql.cj.jdbc.Driver");
        return  servletConfig;
    }
}